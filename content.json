{"meta":{"title":"aymincoder","subtitle":"","description":"前端、博客、javascript、blog、vue","author":"hizhm","url":"https://aymincoder.github.io","root":"/"},"pages":[{"title":"categories","date":"2021-04-10T15:05:23.000Z","updated":"2021-04-10T15:16:01.550Z","comments":true,"path":"categories/index.html","permalink":"https://aymincoder.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-04-10T15:02:53.000Z","updated":"2021-04-10T15:05:32.103Z","comments":true,"path":"tags/index.html","permalink":"https://aymincoder.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JS八股文","slug":"JS八股文必知必会","date":"2022-01-04T04:00:00.000Z","updated":"2022-01-06T03:10:58.050Z","comments":true,"path":"2022/01/04/JS八股文必知必会/","link":"","permalink":"https://aymincoder.github.io/2022/01/04/JS%E5%85%AB%E8%82%A1%E6%96%87%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/","excerpt":"","text":"一、1.JS数据类型?基本数据类型和引用数据类型的区别？ 6个基本数据类型（Boolean undefined null number string Symbol）bunnss 1个复杂数据类型 Object区别： 声明变量时不同的内存分配(值存储，对象存储，存储在变量处的值是一个指针（point），指向存储对象的内存地址） 不同的内存分配机制也带来了不同的访问机制 复制变量时的不同 参数传递的不同(把实参赋值给形参的过程）2.深拷贝和浅拷贝？手写深拷贝？浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；浅拷贝？Object.assign()Object.create()深拷贝？3.作用域、执行上下文？Let var const 的区别？4.什么是闭包？优缺点?实际开发中闭包的使用场景5.this不同应用场景如何取值？ 原型、原型对象、原型链 new操作符的实现？ 怎么判断一个数组是不是数组？ Call、apply、bind的实现 promise，手写Promise async、await的原理 防抖函数的使用场景？自己实现debounce 节流函数的使用场景？自己实现throttle 高阶函数和函数柯里化 跨域及其解决方案 数组filter、map、forEach的区别？ for…in… 和for…of…的区别 事件循环机制 EventLoop 数组扁平化 数组去重 0.1+0.2 != 0.3 事件冒泡、事件捕获、事件委托 模拟Object.create()的实现⭐️ 千分位分隔符⭐️ 判断数据类型的方式有哪些？ 使用typeof判断数据类型会存在那些问题？ null和undefined的区别？ 关于instanceof类型判断和原型链方面知识点 二、参考链接：https://juejin.cn/post/7047153016771706916","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Javascipt","slug":"Javascipt","permalink":"https://aymincoder.github.io/tags/Javascipt/"}]},{"title":"前端动画的几种实现方案","slug":"前端动画的几种实现方案","date":"2022-01-03T04:00:00.000Z","updated":"2022-01-04T09:27:02.941Z","comments":true,"path":"2022/01/03/前端动画的几种实现方案/","link":"","permalink":"https://aymincoder.github.io/2022/01/03/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/","excerpt":"","text":"","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"https://aymincoder.github.io/tags/vue/"}]},{"title":"3D徽章的探索","slug":"3D徽章的探索","date":"2022-01-02T04:00:00.000Z","updated":"2022-01-04T09:27:07.528Z","comments":true,"path":"2022/01/02/3D徽章的探索/","link":"","permalink":"https://aymincoder.github.io/2022/01/02/3D%E5%BE%BD%E7%AB%A0%E7%9A%84%E6%8E%A2%E7%B4%A2/","excerpt":"","text":"","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"https://aymincoder.github.io/tags/vue/"}]},{"title":"实现一个队列","slug":"实现一个队列","date":"2021-04-10T14:53:56.000Z","updated":"2021-04-10T15:38:23.788Z","comments":true,"path":"2021/04/10/实现一个队列/","link":"","permalink":"https://aymincoder.github.io/2021/04/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97/","excerpt":"自己来实现一个队列","text":"自己来实现一个队列 12345678910111213141516171819202122232425262728293031323334353637383940414243// 使用 JavaScript 中的 Array 实现一个队列结构。function Queue () &#123; this.arr = []&#125;Queue.prototype = &#123; /** * 将数据项放入队列中。 * 参数：item，即将加入队列中的元素。 */ put: function (item) &#123; // this.arr.unshift(item) this.arr.push(item) &#125;, /** * 从队列中取出。 */ get: function () &#123; // return this.arr.pop() return this.arr.shift() &#125;, length: function () &#123; return this.arr.length &#125;, /** * 将队列清空（删除队列中的所有元素）。 */ clear: function () &#123; this.arr = [] &#125;&#125;;// Queue 的使用方法样例var q = new Queue();q.put(&quot;A&quot;);q.put(&quot;B&quot;);console.log(q)let r1 = q.get()let r2 = q.get()console.log(r1,r2)console.log(q.length()); // output: 1","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://aymincoder.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"vue实现抽奖老虎机","slug":"vue实现抽奖老虎机","date":"2021-04-10T14:33:02.000Z","updated":"2022-01-06T03:12:56.391Z","comments":true,"path":"2021/04/10/vue实现抽奖老虎机/","link":"","permalink":"https://aymincoder.github.io/2021/04/10/vue%E5%AE%9E%E7%8E%B0%E6%8A%BD%E5%A5%96%E8%80%81%E8%99%8E%E6%9C%BA/","excerpt":"","text":"","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"https://aymincoder.github.io/tags/vue/"}]},{"title":"小程序列表曝光埋点设计","slug":"小程序列表曝光埋点设计","date":"2021-04-10T14:32:50.000Z","updated":"2021-04-12T11:28:08.454Z","comments":true,"path":"2021/04/10/小程序列表曝光埋点设计/","link":"","permalink":"https://aymincoder.github.io/2021/04/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%9D%E5%85%89%E5%9F%8B%E7%82%B9%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"","categories":[{"name":"小程序","slug":"小程序","permalink":"https://aymincoder.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://aymincoder.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"微前端分析","slug":"微前端","date":"2021-03-31T12:00:00.000Z","updated":"2021-04-10T15:14:32.357Z","comments":true,"path":"2021/03/31/微前端/","link":"","permalink":"https://aymincoder.github.io/2021/03/31/%E5%BE%AE%E5%89%8D%E7%AB%AF/","excerpt":"","text":"","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"微前端","slug":"微前端","permalink":"https://aymincoder.github.io/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"}]},{"title":"关于HTTP","slug":"关于HTTP","date":"2021-03-20T10:21:25.000Z","updated":"2021-04-10T15:14:11.951Z","comments":true,"path":"2021/03/20/关于HTTP/","link":"","permalink":"https://aymincoder.github.io/2021/03/20/%E5%85%B3%E4%BA%8EHTTP/","excerpt":"","text":"一、网络分层二、具体协议分析css6","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"https://aymincoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://aymincoder.github.io/tags/HTTP/"}]},{"title":"JavaScript的面向对象","slug":"javaScript的面向对象","date":"2021-03-17T10:21:25.000Z","updated":"2022-01-04T10:37:05.715Z","comments":true,"path":"2021/03/17/javaScript的面向对象/","link":"","permalink":"https://aymincoder.github.io/2021/03/17/javaScript%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"一、什么是面向对象编程思想分为两大块，一个是面向过程，一个面向对象 a.面向过程（process-oriented programming）POP 定义：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一一实现，使用的时候再挨个的调用就可以了 举例：将大象装进冰箱，面向过程的做法。 打开冰箱门 大象装进去 关上冰箱门 b.面向对象（object Oriented Programming）OOP 定义：面向对象就是把事务分成一个个对象，然后由对象之间分工和合作。 举例：将大象装进冰箱，面向对象的做法。(先找出对象，并写出这些对象的功能） 大象对象 （进去） 冰箱对象（ 打开、关闭） 使用大象和冰箱的功能 面向对象是以对象功能划分问题，而不是步骤。 c.面向对象的特性 封装（把类内部的信息统一保护起来，防止外包随意修改内部数据，保证数据的安全性，外部尽可能正确地使用这个类） 继承（爸爸和儿子，继承了姓氏） 多态（同一个对象，在不同的时刻，可以提现不同的状态） d.面向过程和面向对象的对比 面向过程 面向对象 优 点 性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用面向过程编程 易维护、易复用、易扩展由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更灵活，更加易于维护 缺 点 没有面向对象易维护、易复用、易扩展 性能比面向过程低 二.面向对象、ES6中的类和实例对象现实生活中：万物皆对象，对象是一个具体的事物, 看得见摸得着的实物，例如一本书，一杯水，一个人在JavaScript中：对象是一组无序的相关属性和方法的集合，所有的事物都是对象。例如字符串、数组、函数等对象是由属性和方法组成的： 属性：事物的特征 方法：事物的行为 类ES6中新增了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（Class）对象是特指某一个，通过类实例化一个具体的对象 面向对象的思维特点 抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板） 对类进行实例化，获取类的对象","categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Javascipt","slug":"Javascipt","permalink":"https://aymincoder.github.io/tags/Javascipt/"}]}],"categories":[{"name":"web前端","slug":"web前端","permalink":"https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"小程序","slug":"小程序","permalink":"https://aymincoder.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"https://aymincoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Javascipt","slug":"Javascipt","permalink":"https://aymincoder.github.io/tags/Javascipt/"},{"name":"vue","slug":"vue","permalink":"https://aymincoder.github.io/tags/vue/"},{"name":"数据结构","slug":"数据结构","permalink":"https://aymincoder.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"小程序","slug":"小程序","permalink":"https://aymincoder.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"微前端","slug":"微前端","permalink":"https://aymincoder.github.io/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"},{"name":"HTTP","slug":"HTTP","permalink":"https://aymincoder.github.io/tags/HTTP/"}]}