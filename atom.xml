<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aymincoder</title>
  
  
  <link href="https://aymincoder.github.io/atom.xml" rel="self"/>
  
  <link href="https://aymincoder.github.io/"/>
  <updated>2022-01-06T03:10:58.050Z</updated>
  <id>https://aymincoder.github.io/</id>
  
  <author>
    <name>hizhm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS八股文</title>
    <link href="https://aymincoder.github.io/2022/01/04/JS%E5%85%AB%E8%82%A1%E6%96%87%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>https://aymincoder.github.io/2022/01/04/JS%E5%85%AB%E8%82%A1%E6%96%87%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</id>
    <published>2022-01-04T04:00:00.000Z</published>
    <updated>2022-01-06T03:10:58.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><h3 id="1-JS数据类型-基本数据类型和引用数据类型的区别？"><a href="#1-JS数据类型-基本数据类型和引用数据类型的区别？" class="headerlink" title="1.JS数据类型?基本数据类型和引用数据类型的区别？"></a>1.JS数据类型?基本数据类型和引用数据类型的区别？</h3><p>  6个基本数据类型（Boolean undefined null number string Symbol）bunnss<br>  1个复杂数据类型 Object<br>区别：</p><ol><li>声明变量时不同的内存分配(值存储，对象存储，存储在变量处的值是一个指针（point），指向存储对象的内存地址）</li><li>不同的内存分配机制也带来了不同的访问机制</li><li>复制变量时的不同</li><li>参数传递的不同(把实参赋值给形参的过程）<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="内存信息"><h3 id="2-深拷贝和浅拷贝？手写深拷贝？"><a href="#2-深拷贝和浅拷贝？手写深拷贝？" class="headerlink" title="2.深拷贝和浅拷贝？手写深拷贝？"></a>2.深拷贝和浅拷贝？手写深拷贝？</h3>浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；<br>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；<br>区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；<br>浅拷贝？<br>Object.assign()<br>Object.create()<br>深拷贝？<h3 id="3-作用域、执行上下文？Let-var-const-的区别？"><a href="#3-作用域、执行上下文？Let-var-const-的区别？" class="headerlink" title="3.作用域、执行上下文？Let var const 的区别？"></a>3.作用域、执行上下文？Let var const 的区别？</h3><h3 id="4-什么是闭包？优缺点-实际开发中闭包的使用场景"><a href="#4-什么是闭包？优缺点-实际开发中闭包的使用场景" class="headerlink" title="4.什么是闭包？优缺点?实际开发中闭包的使用场景"></a>4.什么是闭包？优缺点?实际开发中闭包的使用场景</h3><h3 id="5-this不同应用场景如何取值？"><a href="#5-this不同应用场景如何取值？" class="headerlink" title="5.this不同应用场景如何取值？"></a>5.this不同应用场景如何取值？</h3></li><li>原型、原型对象、原型链</li><li>new操作符的实现？</li><li>怎么判断一个数组是不是数组？</li><li>Call、apply、bind的实现</li><li>promise，手写Promise</li><li>async、await的原理</li><li>防抖函数的使用场景？自己实现debounce</li><li>节流函数的使用场景？自己实现throttle</li><li>高阶函数和函数柯里化</li><li>跨域及其解决方案</li><li>数组filter、map、forEach的区别？</li><li>for…in… 和for…of…的区别</li><li>事件循环机制 EventLoop</li><li>数组扁平化</li><li>数组去重</li><li>0.1+0.2 != 0.3</li><li>事件冒泡、事件捕获、事件委托</li><li>模拟Object.create()的实现⭐️</li><li>千分位分隔符⭐️</li><li>判断数据类型的方式有哪些？</li><li>使用typeof判断数据类型会存在那些问题？</li><li>null和undefined的区别？</li><li>关于instanceof类型判断和原型链方面知识点</li></ol><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>参考链接：<a href="https://juejin.cn/post/7047153016771706916">https://juejin.cn/post/7047153016771706916</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; title=&quot;一、&quot;&gt;&lt;/a&gt;一、&lt;/h1&gt;&lt;h3 id=&quot;1-JS数据类型-基本数据类型和引用数据类型的区别？&quot;&gt;&lt;a href=&quot;#1-JS数据类型-基本数据类型和引用数据类型的区别？&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascipt" scheme="https://aymincoder.github.io/tags/Javascipt/"/>
    
  </entry>
  
  <entry>
    <title>前端动画的几种实现方案</title>
    <link href="https://aymincoder.github.io/2022/01/03/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://aymincoder.github.io/2022/01/03/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</id>
    <published>2022-01-03T04:00:00.000Z</published>
    <updated>2022-01-04T09:27:02.941Z</updated>
    
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://aymincoder.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>3D徽章的探索</title>
    <link href="https://aymincoder.github.io/2022/01/02/3D%E5%BE%BD%E7%AB%A0%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>https://aymincoder.github.io/2022/01/02/3D%E5%BE%BD%E7%AB%A0%E7%9A%84%E6%8E%A2%E7%B4%A2/</id>
    <published>2022-01-02T04:00:00.000Z</published>
    <updated>2022-01-04T09:27:07.528Z</updated>
    
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://aymincoder.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>实现一个队列</title>
    <link href="https://aymincoder.github.io/2021/04/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97/"/>
    <id>https://aymincoder.github.io/2021/04/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97/</id>
    <published>2021-04-10T14:53:56.000Z</published>
    <updated>2021-04-10T15:38:23.788Z</updated>
    
    <content type="html"><![CDATA[<p>自己来实现一个队列</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 JavaScript 中的 Array 实现一个队列结构。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.arr = []</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将数据项放入队列中。</span></span><br><span class="line"><span class="comment">    * 参数：item，即将加入队列中的元素。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    put: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this.arr.unshift(item)</span></span><br><span class="line">        <span class="built_in">this</span>.arr.push(item)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从队列中取出。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// return this.arr.pop()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.arr.shift()</span><br><span class="line">    &#125;,</span><br><span class="line">    length: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.arr.length</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将队列清空（删除队列中的所有元素）。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Queue 的使用方法样例</span></span><br><span class="line"><span class="keyword">var</span> q = <span class="keyword">new</span> Queue();</span><br><span class="line">q.put(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">q.put(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = q.get()</span><br><span class="line"><span class="keyword">let</span> r2 = q.get()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r1,r2)</span><br><span class="line"><span class="built_in">console</span>.log(q.length()); <span class="comment">// output: 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己来实现一个队列&lt;/p&gt;</summary>
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="数据结构" scheme="https://aymincoder.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>vue实现抽奖老虎机</title>
    <link href="https://aymincoder.github.io/2021/04/10/vue%E5%AE%9E%E7%8E%B0%E6%8A%BD%E5%A5%96%E8%80%81%E8%99%8E%E6%9C%BA/"/>
    <id>https://aymincoder.github.io/2021/04/10/vue%E5%AE%9E%E7%8E%B0%E6%8A%BD%E5%A5%96%E8%80%81%E8%99%8E%E6%9C%BA/</id>
    <published>2021-04-10T14:33:02.000Z</published>
    <updated>2022-01-06T03:12:56.391Z</updated>
    
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://aymincoder.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序列表曝光埋点设计</title>
    <link href="https://aymincoder.github.io/2021/04/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%9D%E5%85%89%E5%9F%8B%E7%82%B9%E8%AE%BE%E8%AE%A1/"/>
    <id>https://aymincoder.github.io/2021/04/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%9D%E5%85%89%E5%9F%8B%E7%82%B9%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-04-10T14:32:50.000Z</published>
    <updated>2021-04-12T11:28:08.454Z</updated>
    
    
    
    
    <category term="小程序" scheme="https://aymincoder.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="小程序" scheme="https://aymincoder.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微前端分析</title>
    <link href="https://aymincoder.github.io/2021/03/31/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    <id>https://aymincoder.github.io/2021/03/31/%E5%BE%AE%E5%89%8D%E7%AB%AF/</id>
    <published>2021-03-31T12:00:00.000Z</published>
    <updated>2021-04-10T15:14:32.357Z</updated>
    
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="微前端" scheme="https://aymincoder.github.io/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTP</title>
    <link href="https://aymincoder.github.io/2021/03/20/%E5%85%B3%E4%BA%8EHTTP/"/>
    <id>https://aymincoder.github.io/2021/03/20/%E5%85%B3%E4%BA%8EHTTP/</id>
    <published>2021-03-20T10:21:25.000Z</published>
    <updated>2021-04-10T15:14:11.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、网络分层"><a href="#一、网络分层" class="headerlink" title="一、网络分层"></a>一、网络分层</h1><h1 id="二、具体协议分析"><a href="#二、具体协议分析" class="headerlink" title="二、具体协议分析"></a>二、具体协议分析</h1><p>css6</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、网络分层&quot;&gt;&lt;a href=&quot;#一、网络分层&quot; class=&quot;headerlink&quot; title=&quot;一、网络分层&quot;&gt;&lt;/a&gt;一、网络分层&lt;/h1&gt;&lt;h1 id=&quot;二、具体协议分析&quot;&gt;&lt;a href=&quot;#二、具体协议分析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="计算机基础" scheme="https://aymincoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="HTTP" scheme="https://aymincoder.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的面向对象</title>
    <link href="https://aymincoder.github.io/2021/03/17/javaScript%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://aymincoder.github.io/2021/03/17/javaScript%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-03-17T10:21:25.000Z</published>
    <updated>2022-01-04T10:37:05.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是面向对象"><a href="#一、什么是面向对象" class="headerlink" title="一、什么是面向对象"></a>一、什么是面向对象</h2><p>编程思想分为两大块，一个是面向过程，一个面向对象</p><h3 id="a-面向过程（process-oriented-programming）POP"><a href="#a-面向过程（process-oriented-programming）POP" class="headerlink" title="a.面向过程（process-oriented programming）POP"></a>a.面向过程（process-oriented programming）POP</h3><ul><li>定义：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一一实现，使用的时候再挨个的调用就可以了</li><li>举例：将大象装进冰箱，面向过程的做法。<ol><li>打开冰箱门 </li><li>大象装进去 </li><li>关上冰箱门</li></ol></li></ul><h3 id="b-面向对象（object-Oriented-Programming）OOP"><a href="#b-面向对象（object-Oriented-Programming）OOP" class="headerlink" title="b.面向对象（object Oriented Programming）OOP"></a>b.面向对象（object Oriented Programming）OOP</h3><ul><li>定义：面向对象就是把事务分成一个个对象，然后由对象之间分工和合作。</li><li>举例：将大象装进冰箱，面向对象的做法。(先找出对象，并写出这些对象的功能）<ol><li>大象对象 （进去）</li><li>冰箱对象（ 打开、关闭）</li><li>使用大象和冰箱的功能  </li></ol></li></ul><p><strong>面向对象是以对象功能划分问题，而不是步骤。</strong></p><h3 id="c-面向对象的特性"><a href="#c-面向对象的特性" class="headerlink" title="c.面向对象的特性"></a>c.面向对象的特性</h3><ul><li>封装（把类内部的信息统一保护起来，防止外包随意修改内部数据，保证数据的安全性，外部尽可能正确地使用这个类）</li><li>继承（爸爸和儿子，继承了姓氏）</li><li>多态（同一个对象，在不同的时刻，可以提现不同的状态）</li></ul><h3 id="d-面向过程和面向对象的对比"><a href="#d-面向过程和面向对象的对比" class="headerlink" title="d.面向过程和面向对象的对比"></a>d.面向过程和面向对象的对比</h3><table><thead><tr><th></th><th>面向过程</th><th align="left">面向对象</th></tr></thead><tbody><tr><td>优 点</td><td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用面向过程编程</td><td align="left">易维护、易复用、易扩展由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更灵活，更加易于维护</td></tr><tr><td>缺 点</td><td>没有面向对象易维护、易复用、易扩展</td><td align="left">性能比面向过程低</td></tr></tbody></table><h2 id="二-面向对象、ES6中的类和实例"><a href="#二-面向对象、ES6中的类和实例" class="headerlink" title="二.面向对象、ES6中的类和实例"></a>二.面向对象、ES6中的类和实例</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>现实生活中：万物皆对象，对象是一个具体的事物,  看得见摸得着的实物，例如一本书，一杯水，一个人<br>在JavaScript中：对象是一组无序的相关属性和方法的集合，所有的事物都是对象。例如字符串、数组、函数等<br>对象是由属性和方法组成的：</p><ul><li>属性：事物的特征</li><li>方法：事物的行为</li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>ES6中新增了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象。<br>类抽象了对象的公共部分，它泛指某一大类（Class）<br>对象是特指某一个，通过类实例化一个具体的对象</p><p><strong>面向对象的思维特点</strong></p><ol><li>抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板）</li><li>对类进行实例化，获取类的对象</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、什么是面向对象&quot;&gt;&lt;a href=&quot;#一、什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;一、什么是面向对象&quot;&gt;&lt;/a&gt;一、什么是面向对象&lt;/h2&gt;&lt;p&gt;编程思想分为两大块，一个是面向过程，一个面向对象&lt;/p&gt;
&lt;h3 id=&quot;a-面向过</summary>
      
    
    
    
    <category term="web前端" scheme="https://aymincoder.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aymincoder.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascipt" scheme="https://aymincoder.github.io/tags/Javascipt/"/>
    
  </entry>
  
</feed>
